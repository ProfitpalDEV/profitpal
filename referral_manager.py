# referral_manager.py - –°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ ProfitPal

import sqlite3
import random
import string
import hashlib
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple
import os
from cryptography.fernet import Fernet
import base64

class ReferralManager:
    def __init__(self, db_path: str = "referrals.db"):
        self.db_path = db_path
        self.encryption_key = self._get_or_create_encryption_key()
        self.fernet = Fernet(self.encryption_key)
        self.init_database()
        print("üíé Referral Manager initialized!")

    def _get_or_create_encryption_key(self) -> bytes:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        key_file = "referral_key.key"
        if os.path.exists(key_file):
            with open(key_file, 'rb') as f:
                return f.read()
        else:
            key = Fernet.generate_key()
            with open(key_file, 'wb') as f:
                f.write(key)
            return key

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö referrals"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_email TEXT NOT NULL UNIQUE,
                referral_code TEXT NOT NULL UNIQUE,
                referral_link TEXT NOT NULL,
                free_months_balance INTEGER DEFAULT 0,
                total_referrals INTEGER DEFAULT 0,
                total_earned_months INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS referral_uses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                referral_code TEXT NOT NULL,
                referrer_email TEXT NOT NULL,
                new_user_email TEXT NOT NULL,
                payment_amount REAL NOT NULL,
                reward_months INTEGER DEFAULT 1,
                used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (referral_code) REFERENCES referrals (referral_code)
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ free months
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS free_months_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_email TEXT NOT NULL,
                action_type TEXT NOT NULL, -- 'earned', 'used', 'expired'
                months_change INTEGER NOT NULL, -- +1, -1, etc.
                balance_after INTEGER NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        conn.commit()
        conn.close()
        print("‚úÖ Referral database initialized!")

    def generate_unique_referral_code(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π referral –∫–æ–¥:
        - 5 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (A-Z)
        - 5 —Ü–∏—Ñ—Ä (0-9)  
        - 5 –º–∞–ª–µ–Ω—å–∫–∏—Ö –±—É–∫–≤ (a-z)
        - –ë–ï–ó –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô –º–µ–∂–¥—É –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –∏ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏

        –ü—Ä–∏–º–µ—Ä: ABCDE12345fghij
        """
        max_attempts = 100

        for attempt in range(max_attempts):
            # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –±—É–∫–≤ –∏–∑ –∞–ª—Ñ–∞–≤–∏—Ç–∞
            available_letters = list(string.ascii_lowercase)  # a-z
            selected_letters = random.sample(available_letters, 5)

            # –£–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∑–∞–≥–ª–∞–≤–Ω—ã—Ö
            remaining_letters = [letter for letter in string.ascii_lowercase 
                               if letter not in selected_letters]

            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 5 –±—É–∫–≤ –¥–ª—è –∑–∞–≥–ª–∞–≤–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            if len(remaining_letters) < 5:
                continue

            # –í—ã–±–∏—Ä–∞–µ–º 5 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (–ù–ï –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏)
            uppercase_letters = [letter.upper() for letter in 
                               random.sample(remaining_letters, 5)]

            # 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ñ—Ä
            digits = [str(random.randint(0, 9)) for _ in range(5)]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥: –ó–ê–ì–õ–ê–í–ù–´–ï + –¶–ò–§–†–´ + –º–∞–ª–µ–Ω—å–∫–∏–µ
            referral_code = ''.join(uppercase_letters) + ''.join(digits) + ''.join(selected_letters)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ –±–∞–∑–µ
            if not self.referral_code_exists(referral_code):
                print(f"üéØ Generated referral code: {referral_code}")
                return referral_code

        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 100 –ø–æ–ø—ã—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
        fallback_code = self._generate_fallback_code()
        print(f"‚ö†Ô∏è Using fallback referral code: {fallback_code}")
        return fallback_code

    def _generate_fallback_code(self) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å timestamp"""
        timestamp = str(int(datetime.now().timestamp()))[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–∏—Ñ—Ä
        uppercase = ''.join(random.choices(string.ascii_uppercase, k=5))
        lowercase = ''.join(random.choices(string.ascii_lowercase, k=5))
        return f"{uppercase}{timestamp}{lowercase}"

    def referral_code_exists(self, referral_code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ referral –∫–æ–¥"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('SELECT COUNT(*) FROM referrals WHERE referral_code = ?', (referral_code,))
        exists = cursor.fetchone()[0] > 0

        conn.close()
        return exists

    def create_referral_for_user(self, user_email: str, domain: str = "https://profitpal.org") -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å referral –∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ payment $24.99
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ referral –∫–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = self.get_user_referral_info(user_email)
            if existing and existing.get('referral_code'):
                return {
                    'success': True,
                    'referral_code': existing['referral_code'],
                    'referral_link': existing['referral_link'],
                    'message': 'Referral code already exists'
                }

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            referral_code = self.generate_unique_referral_code()
            referral_link = f"{domain}?ref={referral_code}"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute('''
                INSERT OR REPLACE INTO referrals 
                (user_email, referral_code, referral_link, free_months_balance, total_referrals, total_earned_months)
                VALUES (?, ?, ?, 0, 0, 0)
            ''', (user_email, referral_code, referral_link))

            conn.commit()
            conn.close()

            print(f"üéâ Referral created for {user_email}: {referral_code}")

            return {
                'success': True,
                'referral_code': referral_code,
                'referral_link': referral_link,
                'free_months_balance': 0,
                'message': 'Referral code created successfully'
            }

        except Exception as e:
            print(f"‚ùå Error creating referral: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    def process_referral_signup(self, referral_code: str, new_user_email: str, payment_amount: float = 24.99) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ referral —Å—Å—ã–ª–∫–µ
        –î–∞—Ç—å +1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –ù–∞–π—Ç–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ –∫–æ–¥—É
            cursor.execute('SELECT user_email, free_months_balance, total_referrals FROM referrals WHERE referral_code = ?', 
                         (referral_code,))
            referrer_data = cursor.fetchone()

            if not referrer_data:
                conn.close()
                return {
                    'success': False,
                    'error': 'Invalid referral code'
                }

            referrer_email, current_balance, total_referrals = referrer_data

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç email —ç—Ç–æ—Ç referral –∫–æ–¥
            cursor.execute('SELECT COUNT(*) FROM referral_uses WHERE referral_code = ? AND new_user_email = ?',
                         (referral_code, new_user_email))
            already_used = cursor.fetchone()[0] > 0

            if already_used:
                conn.close()
                return {
                    'success': False,
                    'error': 'Referral code already used by this user'
                }

            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –Ω–∞–≥—Ä–∞–¥—ã (–æ–±—ã—á–Ω–æ 1)
            reward_months = 1

            # –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            new_balance = current_balance + reward_months
            new_total_referrals = total_referrals + 1
            new_total_earned = cursor.execute('SELECT total_earned_months FROM referrals WHERE referral_code = ?', 
                                           (referral_code,)).fetchone()[0] + reward_months

            cursor.execute('''
                UPDATE referrals 
                SET free_months_balance = ?, total_referrals = ?, total_earned_months = ?, last_updated = ?
                WHERE referral_code = ?
            ''', (new_balance, new_total_referrals, new_total_earned, datetime.now(), referral_code))

            # –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ referral
            cursor.execute('''
                INSERT INTO referral_uses 
                (referral_code, referrer_email, new_user_email, payment_amount, reward_months)
                VALUES (?, ?, ?, ?, ?)
            ''', (referral_code, referrer_email, new_user_email, payment_amount, reward_months))

            # –ó–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é free months
            cursor.execute('''
                INSERT INTO free_months_history 
                (user_email, action_type, months_change, balance_after, description)
                VALUES (?, 'earned', ?, ?, ?)
            ''', (referrer_email, reward_months, new_balance, f"Referral signup: {new_user_email}"))

            conn.commit()
            conn.close()

            print(f"üéâ Referral processed! {referrer_email} earned {reward_months} free month(s)")

            return {
                'success': True,
                'referrer_email': referrer_email,
                'reward_months': reward_months,
                'new_balance': new_balance,
                'message': f'Referral processed successfully. {referrer_email} earned {reward_months} free month(s)'
            }

        except Exception as e:
            print(f"‚ùå Error processing referral: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    def check_and_use_free_month(self, user_email: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–µ—Å—è—Ü
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Å–ø–∏—Å—ã–≤–∞—Ç—å $7.99
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            cursor.execute('SELECT free_months_balance FROM referrals WHERE user_email = ?', (user_email,))
            result = cursor.fetchone()

            if not result:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ referral —Å–∏—Å—Ç–µ–º—ã - –ø–ª–∞—Ç–∏—Ç –ø–æ–ª–Ω—É—é —Å—É–º–º—É
                conn.close()
                return {
                    'should_charge': True,
                    'charge_amount': 7.99,
                    'free_months_remaining': 0,
                    'message': 'No referral account found'
                }

            current_balance = result[0]

            if current_balance > 0:
                # –ï—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Å—è—Ü—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω
                new_balance = current_balance - 1

                cursor.execute('''
                    UPDATE referrals 
                    SET free_months_balance = ?, last_updated = ?
                    WHERE user_email = ?
                ''', (new_balance, datetime.now(), user_email))

                # –ó–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                cursor.execute('''
                    INSERT INTO free_months_history 
                    (user_email, action_type, months_change, balance_after, description)
                    VALUES (?, 'used', -1, ?, 'Monthly billing - used free month')
                ''', (user_email, new_balance))

                conn.commit()
                conn.close()

                return {
                    'should_charge': False,
                    'charge_amount': 0.00,
                    'free_months_remaining': new_balance,
                    'message': f'Free month used. {new_balance} months remaining',
                    'billing_note': f'Referral credit used - {new_balance} free months remaining'
                }

            else:
                # –ù–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ - —Å–ø–∏—Å—ã–≤–∞–µ–º $7.99
                conn.close()
                return {
                    'should_charge': True,
                    'charge_amount': 7.99,
                    'free_months_remaining': 0,
                    'message': 'No free months available - charging $7.99'
                }

        except Exception as e:
            print(f"‚ùå Error checking free months: {e}")
            return {
                'should_charge': True,
                'charge_amount': 7.99,
                'free_months_remaining': 0,
                'error': str(e)
            }

    def get_user_referral_info(self, user_email: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ referral –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute('''
                SELECT referral_code, referral_link, free_months_balance, 
                       total_referrals, total_earned_months, created_at
                FROM referrals WHERE user_email = ?
            ''', (user_email,))

            result = cursor.fetchone()
            conn.close()

            if result:
                return {
                    'referral_code': result[0],
                    'referral_link': result[1],
                    'free_months_balance': result[2],
                    'total_referrals': result[3],
                    'total_earned_months': result[4],
                    'created_at': result[5]
                }
            return None

        except Exception as e:
            print(f"‚ùå Error getting referral info: {e}")
            return None

    def get_referral_statistics(self, user_email: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ referrals –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            referral_info = self.get_user_referral_info(user_email)
            if not referral_info:
                return {'error': 'User not found in referral system'}

            # –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            cursor.execute('''
                SELECT new_user_email, payment_amount, used_at 
                FROM referral_uses 
                WHERE referrer_email = ? 
                ORDER BY used_at DESC
            ''', (user_email,))

            referral_uses = cursor.fetchall()

            # –ò—Å—Ç–æ—Ä–∏—è free months
            cursor.execute('''
                SELECT action_type, months_change, balance_after, description, created_at
                FROM free_months_history 
                WHERE user_email = ? 
                ORDER BY created_at DESC 
                LIMIT 10
            ''', (user_email,))

            months_history = cursor.fetchall()

            conn.close()

            return {
                'referral_info': referral_info,
                'recent_referrals': [
                    {
                        'new_user_email': use[0],
                        'payment_amount': use[1],
                        'used_at': use[2]
                    } for use in referral_uses
                ],
                'months_history': [
                    {
                        'action_type': hist[0],
                        'months_change': hist[1],
                        'balance_after': hist[2],
                        'description': hist[3],
                        'created_at': hist[4]
                    } for hist in months_history
                ]
            }

        except Exception as e:
            print(f"‚ùå Error getting referral statistics: {e}")
            return {'error': str(e)}

    def extract_referral_code_from_url(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å referral –∫–æ–¥ –∏–∑ URL"""
        try:
            if '?ref=' in url:
                return url.split('?ref=')[1].split('&')[0]
            elif '&ref=' in url:
                return url.split('&ref=')[1].split('&')[0]
            return None
        except:
            return None

    def validate_referral_code_format(self, referral_code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç referral –∫–æ–¥–∞"""
        if len(referral_code) != 15:
            return False

        # –ü–µ—Ä–≤—ã–µ 5 - –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
        if not referral_code[:5].isupper() or not referral_code[:5].isalpha():
            return False

        # –°–ª–µ–¥—É—é—â–∏–µ 5 - —Ü–∏—Ñ—Ä—ã
        if not referral_code[5:10].isdigit():
            return False

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 - –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã
        if not referral_code[10:15].islower() or not referral_code[10:15].isalpha():
            return False

        return True

    def get_all_referral_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É referral —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ referral –∫–æ–¥–æ–≤
            cursor.execute('SELECT COUNT(*) FROM referrals')
            total_referrals = cursor.fetchone()[0]

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            cursor.execute('SELECT COUNT(*) FROM referral_uses')
            total_uses = cursor.fetchone()[0]

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö free months
            cursor.execute('SELECT SUM(total_earned_months) FROM referrals')
            total_earned_months = cursor.fetchone()[0] or 0

            # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö free months
            cursor.execute('SELECT SUM(free_months_balance) FROM referrals')
            current_free_months = cursor.fetchone()[0] or 0

            # –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ã
            cursor.execute('''
                SELECT user_email, total_referrals, total_earned_months, free_months_balance
                FROM referrals 
                ORDER BY total_referrals DESC 
                LIMIT 10
            ''')
            top_referrers = cursor.fetchall()

            conn.close()

            return {
                'total_referral_codes': total_referrals,
                'total_successful_uses': total_uses,
                'total_earned_months': total_earned_months,
                'current_free_months_balance': current_free_months,
                'top_referrers': [
                    {
                        'email': ref[0],
                        'total_referrals': ref[1],
                        'total_earned_months': ref[2],
                        'free_months_balance': ref[3]
                    } for ref in top_referrers
                ]
            }

        except Exception as e:
            print(f"‚ùå Error getting referral stats: {e}")
            return {'error': str(e)}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    referral_mgr = ReferralManager()

    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ referral –∫–æ–¥–∞
    print("üß™ Testing referral code generation:")
    for i in range(5):
        code = referral_mgr.generate_unique_referral_code()
        print(f"Generated: {code}")
        print(f"Valid format: {referral_mgr.validate_referral_code_format(code)}")
        print(f"Uppercase: {code[:5]}, Digits: {code[5:10]}, Lowercase: {code[10:15]}")
        print("---")

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è referral –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üß™ Testing referral creation:")
    result = referral_mgr.create_referral_for_user("john.smith@gmail.com")
    print(f"Creation result: {result}")

    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ referral signup
    if result['success']:
        print("üß™ Testing referral signup:")
        signup_result = referral_mgr.process_referral_signup(
            result['referral_code'], 
            "friend@gmail.com"
        )
        print(f"Signup result: {signup_result}")

        # –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è free month
        print("üß™ Testing free month usage:")
        usage_result = referral_mgr.check_and_use_free_month("john.smith@gmail.com")
        print(f"Usage result: {usage_result}")

    print("‚úÖ Referral Manager testing completed!")