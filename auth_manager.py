# auth_manager.py - –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ProfitPal

import sqlite3
import hashlib
import secrets
import os
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple
from cryptography.fernet import Fernet
import base64

class AuthManager:
    def __init__(self):
        # –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ environment variable
        secret = os.getenv('AUTH_SECRET_KEY', 'profitpal_auth_secret_2025_denava')
        self.key = hashlib.sha256(secret.encode()).digest()
        self.fernet = Fernet(base64.urlsafe_b64encode(self.key))

        self.db_path = 'profitpal_auth.db'
        self.init_database()
        print("‚úÖ Auth Manager initialized")

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                encrypted_email TEXT UNIQUE NOT NULL,
                encrypted_full_name TEXT NOT NULL,
                license_key TEXT UNIQUE NOT NULL,
                stripe_customer_id TEXT,
                payment_status TEXT DEFAULT 'completed',
                card_last4 TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_login TIMESTAMP,
                login_count INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT 1
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                session_token TEXT UNIQUE NOT NULL,
                expires_at TIMESTAMP NOT NULL,
                ip_address TEXT,
                user_agent TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS login_attempts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT,
                license_key TEXT,
                success BOOLEAN,
                ip_address TEXT,
                user_agent TEXT,
                attempt_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        conn.commit()
        conn.close()
        print("‚úÖ Auth database initialized")

    def encrypt_data(self, data: str) -> str:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not data:
            return None
        return self.fernet.encrypt(data.encode()).decode()

    def decrypt_data(self, encrypted_data: str) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not encrypted_data:
            return None
        try:
            return self.fernet.decrypt(encrypted_data.encode()).decode()
        except:
            return None

    def generate_license_key(self, email: str, full_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""

        # üëë –ü–†–û–í–ï–†–ö–ê –ù–ê –ê–î–ú–ò–ù–ê –ò–ó ENVIRONMENT VARIABLES
        admin_email = os.getenv('ADMIN_EMAIL', '')
        if email.lower().strip() == admin_email.lower():
            admin_key = os.getenv('ADMIN_LICENSE_KEY', 'PP-ADMIN-DEFAULT')
            print(f"üéØ Generating ADMIN license key for: {email}")
            return admin_key

        # üë§ –û–ë–´–ß–ù–´–ô –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –ö–õ–Æ–ß
        seed = f"{email.lower().strip()}_{full_name.upper().strip()}_{datetime.now().isoformat()}_{secrets.token_hex(16)}"
        hash_object = hashlib.sha256(seed.encode())
        hash_hex = hash_object.hexdigest()
        key_part = hash_hex[:12].upper()
        license_key = f"PP-{key_part[:4]}-{key_part[4:8]}-{key_part[8:12]}"

        return license_key

    def create_user(self, email: str, full_name: str, stripe_customer_id: str = None, 
                   card_last4: str = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
            existing_user = self.get_user_by_email(email)
            if existing_user:
                return {
                    "success": False,
                    "error": "User already exists",
                    "license_key": existing_user.get("license_key")
                }

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á
            license_key = self.generate_license_key(email, full_name)

            # –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            encrypted_email = self.encrypt_data(email.lower().strip())
            encrypted_name = self.encrypt_data(full_name.strip())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                INSERT INTO users 
                (encrypted_email, encrypted_full_name, license_key, stripe_customer_id, 
                 card_last4, payment_status, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (encrypted_email, encrypted_name, license_key, stripe_customer_id,
                  card_last4, 'completed', datetime.now().isoformat()))

            user_id = cursor.lastrowid
            conn.commit()
            conn.close()

            print(f"‚úÖ User created: {email} ‚Üí {license_key}")

            return {
                "success": True,
                "user_id": user_id,
                "email": email,
                "full_name": full_name,
                "license_key": license_key,
                "message": "User created successfully"
            }

        except Exception as e:
            print(f"‚ùå Error creating user: {e}")
            return {
                "success": False,
                "error": f"Failed to create user: {str(e)}"
            }

    def get_user_by_email(self, email: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute('SELECT * FROM users WHERE is_active = 1')

            for row in cursor.fetchall():
                try:
                    decrypted_email = self.decrypt_data(row[1])
                    if decrypted_email and decrypted_email.lower() == email.lower().strip():
                        user_data = {
                            'id': row[0],
                            'email': decrypted_email,
                            'full_name': self.decrypt_data(row[2]),
                            'license_key': row[3],
                            'stripe_customer_id': row[4],
                            'payment_status': row[5],
                            'card_last4': row[6],
                            'created_at': row[7],
                            'last_login': row[8],
                            'login_count': row[9],
                            'is_active': bool(row[10])
                        }
                        conn.close()
                        return user_data
                except:
                    continue

            conn.close()
            return None

        except Exception as e:
            print(f"‚ùå Error getting user by email: {e}")
            return None

    def validate_credentials(self, email: str, license_key: str) -> Dict[str, Any]:
        """üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ email + license –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
            self.log_login_attempt(email, license_key, False)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            user = self.get_user_by_email(email)

            if not user:
                return {
                    "valid": False,
                    "error": "User not found",
                    "show_name": False
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º license key
            if user['license_key'] != license_key.strip().upper():
                return {
                    "valid": False,
                    "error": "Invalid license key",
                    "show_name": False
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
            if user['payment_status'] != 'completed':
                return {
                    "valid": False,
                    "error": "Payment not completed",
                    "show_name": False
                }

            # ‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –í–û–ó–í–†–ê–©–ê–ï–ú –ò–ú–Ø –î–õ–Ø –ü–û–î–°–í–ï–¢–ö–ò
            self.log_login_attempt(email, license_key, True)

            return {
                "valid": True,
                "show_name": True,
                "full_name": user['full_name'],
                "email": user['email'],
                "license_key": user['license_key'],
                "user_id": user['id'],
                "last_login": user['last_login'],
                "login_count": user['login_count']
            }

        except Exception as e:
            print(f"‚ùå Error validating credentials: {e}")
            return {
                "valid": False,
                "error": "Validation failed",
                "show_name": False
            }

    def authenticate_user(self, email: str, license_key: str, full_name: str = None, 
                         ip_address: str = None, user_agent: str = None) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º credentials
            validation = self.validate_credentials(email, license_key)

            if not validation['valid']:
                return validation

            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if full_name and full_name.strip() != validation['full_name']:
                return {
                    "authenticated": False,
                    "error": "Name mismatch"
                }

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            self.update_last_login(validation['user_id'])

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session_token = self.create_session(validation['user_id'], ip_address, user_agent)

            return {
                "authenticated": True,
                "session_token": session_token,
                "user": {
                    "id": validation['user_id'],
                    "email": validation['email'],
                    "full_name": validation['full_name'],
                    "license_key": validation['license_key']
                },
                "message": f"Welcome back, {validation['full_name']}!"
            }

        except Exception as e:
            print(f"‚ùå Authentication error: {e}")
            return {
                "authenticated": False,
                "error": "Authentication failed"
            }

    def create_session(self, user_id: int, ip_address: str = None, 
                      user_agent: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
            session_token = secrets.token_urlsafe(32)
            expires_at = (datetime.now() + timedelta(days=30)).isoformat()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            cursor.execute('''
                INSERT INTO user_sessions 
                (user_id, session_token, expires_at, ip_address, user_agent)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, session_token, expires_at, ip_address, user_agent))

            conn.commit()
            conn.close()

            print(f"‚úÖ Session created for user {user_id}")
            return session_token

        except Exception as e:
            print(f"‚ùå Error creating session: {e}")
            return None

    def validate_session(self, session_token: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute('''
                SELECT s.*, u.encrypted_email, u.encrypted_full_name, u.license_key
                FROM user_sessions s
                JOIN users u ON s.user_id = u.id
                WHERE s.session_token = ? AND s.expires_at > ? AND u.is_active = 1
            ''', (session_token, datetime.now().isoformat()))

            row = cursor.fetchone()
            conn.close()

            if row:
                return {
                    'session_id': row[0],
                    'user_id': row[1],
                    'email': self.decrypt_data(row[6]),
                    'full_name': self.decrypt_data(row[7]),
                    'license_key': row[8],
                    'expires_at': row[3]
                }

            return None

        except Exception as e:
            print(f"‚ùå Error validating session: {e}")
            return None

    def update_last_login(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute('''
                UPDATE users 
                SET last_login = ?, login_count = login_count + 1
                WHERE id = ?
            ''', (datetime.now().isoformat(), user_id))

            conn.commit()
            conn.close()

        except Exception as e:
            print(f"‚ùå Error updating last login: {e}")

    def log_login_attempt(self, email: str, license_key: str, success: bool, 
                         ip_address: str = None, user_agent: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute('''
                INSERT INTO login_attempts 
                (email, license_key, success, ip_address, user_agent)
                VALUES (?, ?, ?, ?, ?)
            ''', (email, license_key[:8] + "...", success, ip_address, user_agent))

            conn.commit()
            conn.close()

        except Exception as e:
            print(f"‚ùå Error logging attempt: {e}")

    def get_user_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 1')
            active_users = cursor.fetchone()[0]

            cursor.execute('SELECT COUNT(*) FROM users')
            total_users = cursor.fetchone()[0]

            cursor.execute('SELECT COUNT(*) FROM user_sessions WHERE expires_at > ?', 
                          (datetime.now().isoformat(),))
            active_sessions = cursor.fetchone()[0]

            cursor.execute('SELECT COUNT(*) FROM login_attempts WHERE success = 1 AND attempt_time > ?',
                          (datetime.now().replace(hour=0, minute=0, second=0).isoformat(),))
            today_logins = cursor.fetchone()[0]

            conn.close()

            return {
                "active_users": active_users,
                "total_users": total_users,
                "active_sessions": active_sessions,
                "today_logins": today_logins,
                "generated_at": datetime.now().isoformat()
            }

        except Exception as e:
            print(f"‚ùå Error getting stats: {e}")
            return {}

    def deactivate_user(self, email: str) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.get_user_by_email(email)
            if not user:
                return False

            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute('UPDATE users SET is_active = 0 WHERE id = ?', (user['id'],))
            conn.commit()
            conn.close()

            print(f"‚úÖ User deactivated: {email}")
            return True

        except Exception as e:
            print(f"‚ùå Error deactivating user: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth_manager = AuthManager()

# ==========================================
# –ü–†–û–°–¢–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í MAIN.PY
# ==========================================

def create_new_user(email: str, full_name: str, stripe_customer_id: str = None, 
                   card_last4: str = None) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    return auth_manager.create_user(email, full_name, stripe_customer_id, card_last4)

def validate_user_credentials(email: str, license_key: str) -> Dict[str, Any]:
    """üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: Email + License ‚Üí Name –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏"""
    return auth_manager.validate_credentials(email, license_key)

def authenticate_user_login(
    email: str,
    license_key: str,
    full_name: str = None,
    ip_address: str = None,
    user_agent: str = None,
) -> Dict[str, Any]:
    """–ü–æ–ª–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ (—Å –Ω–∞–¥—ë–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–º–∏–Ω–∞)"""

    # --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    req_email = (email or "").strip().lower()
    # –∫–ª—é—á –ø—Ä–∏–≤–æ–¥–∏–º –∫ upper –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    req_key   = (license_key or "").strip().upper().replace(" ", "")
    req_key_nohyphen = req_key.replace("-", "")

    # --- –ß–∏—Ç–∞–µ–º ENV –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    admin_email = (os.getenv("ADMIN_EMAIL", "") or "").strip().lower()
    admin_key   = (os.getenv("ADMIN_LICENSE_KEY", "") or "").strip().upper().replace(" ", "")
    admin_key_nohyphen = admin_key.replace("-", "")

    # --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ø–æ–º–æ–∂–µ—Ç –≤ Railway Logs –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–µ —Å–æ—à–ª–æ—Å—å)
    def _mask(s: str) -> str:
        if not s:
            return "‚àÖ"
        s = str(s)
        return (s[:3] + "‚Ä¶***‚Ä¶" + s[-3:]) if len(s) > 6 else "***"

    email_ok = (req_email == admin_email)
    key_eq   = (req_key == admin_key)
    key_nh   = (req_key_nohyphen == admin_key_nohyphen)

    print(f"üß™ Admin check: email_ok={email_ok} | req={req_email} | env={admin_email}")
    print(f"üß™ Admin key:   eq={key_eq}, nohyphen={key_nh} | req={_mask(req_key)} | env={_mask(admin_key)}")

    # --- –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if email_ok and (key_eq or key_nh):
        token = secrets.token_urlsafe(32)
        admin_name = os.getenv("ADMIN_FULL_NAME", "Administrator")
        print(f"üëë Admin login OK: {req_email}")
        return {
            "authenticated": True,
            "success": True,
            "session_token": token,
            "user": {"email": admin_email, "full_name": admin_name, "role": "admin"},
            "message": "Welcome, admin",
        }

    # --- –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É)
    return auth_manager.authenticate_user(
        email=email,
        license_key=license_key,
        full_name=full_name,
        ip_address=ip_address,
        user_agent=user_agent,
    )


def check_session_validity(session_token: str) -> Optional[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
    return auth_manager.validate_session(session_token)

def get_auth_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return auth_manager.get_user_stats()

# ==========================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ==========================================

if __name__ == "__main__":
    print("\nüîêüîêüîê AUTH MANAGER TESTING üîêüîêüîê")

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_result = create_new_user(
        email="vasja.pupkin@gmail.com",
        full_name="Vasja Pupkin",
        stripe_customer_id="cus_test123",
        card_last4="4242"
    )
    print(f"‚úÖ Create user: {test_result}")

    if test_result["success"]:
        license_key = test_result["license_key"]

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ credentials
        validation = validate_user_credentials("vasja.pupkin@gmail.com", license_key)
        print(f"‚úÖ Validation: {validation}")

        if validation["valid"]:
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            auth_result = authenticate_user_login(
                email="vasja.pupkin@gmail.com",
                license_key=license_key,
                full_name="Vasja Pupkin",
                ip_address="127.0.0.1"
            )
            print(f"‚úÖ Authentication: {auth_result}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = get_auth_stats()
    print(f"üìä Stats: {stats}")

    print("\nüéØ AUTH MANAGER READY FOR PRODUCTION! üéØ")